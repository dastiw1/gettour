!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("gettour",[],e):"object"==typeof exports?exports.gettour=e():t.gettour=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";function i(t){console.error(t)}function o(t){var e=document.getElementsByTagName("HEAD")[0],n=document.createElement("link");n.rel="stylesheet",n.type="text/css",n.href=t,e.appendChild(n)}Object.defineProperty(e,"__esModule",{value:!0}),e.showError=i,e.loadCss=o,e.default=void 0;var r={showError:i,loadCss:o};e.default=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i=s(n(2)),o=s(n(3)),r=n(0);function s(t){return t&&t.__esModule?t:{default:t}}function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t){var e=window.scrollY||window.pageYOffset,n=t.getBoundingClientRect().top+e,i=e,o=e+window.innerHeight,r=n,s=n+t.clientHeight;return s>=i&&s<=o||r<=o&&r>=i}function l(t){return!(!t.origin.indexOf("https://getchat.me")&&!t.origin.indexOf("http://localhost:3000"))&&("object"===a(t.data)&&"getchat-widget"===t.data.source)}var h={stylesFilePath:"http://localhost:3000/gettour-styles.css",selector:".getchat-widget__frame",expandClass:"getchat-widget--expanded",active:!1,__intro:null,widgetHash:null,autoShowConditions:[],hash:null,domain:null,block:null,setOptions:function(t){var e=t.options;"object"===a(e)?this.__intro.setOptions(e):this.__intro.setOptions(this.config)},stylesLoaded:!1,__observers:{},init:function(t){var e=this,n=this;return this.hash=t,this.loadWidgetData().then(function(t){e.domain=t.domain,e.active=t.widget_active,e.autoShowConditions=t.conditions,e.domain===window.location.host?e.active&&(e.__intro=(0,i.default)(),e.__intro.onchange(function(){return n.__intro.refresh(),e}),e.__intro.onbeforechange(function(){if(e.__intro._introItems.length){var t=e.__intro._introItems[0];n.setOptions(t)}var i=document.querySelector(".getchat-widget > .getchat-widget__btn--icon");i&&(i.style.display="none")}),e.__intro.onexit(function(){var t=document.querySelector(".getchat-widget > .getchat-widget__btn--icon");t&&(t.style.display="inline-flex")}),window.addEventListener("message",function(t){e.__listenForHighlightRequests.call(e,t)}),window.addEventListener("message",function(t){e.__listenForActionClickedRequests.call(e,t)}),window.addEventListener("message",function(t){e.__listenForObserveRequests.call(e,t)}),e.loadCondition(),e.listenForLocationChange()):(0,r.showError)("[Ошибка] Виджет не для этого домена")}),this},loadCondition:function(){var t=this;this.autoShowConditions.forEach(function(e){new RegExp(e.urlRegex,"i").test(window.location.pathname)&&setTimeout(function(){t.renderWidget(e.src),t.stylesLoaded||t.loadStyles(),t.initEventListeners()},1e3*e.timeInterval)})},listenForLocationChange:function(){var t,e=this;history.pushState=(t=history.pushState,function(){var e=t.apply(this,arguments);return window.dispatchEvent(new Event("pushState")),window.dispatchEvent(new Event("locationchange")),e}),history.replaceState=function(t){return function(){var e=t.apply(this,arguments);return window.dispatchEvent(new Event("replaceState")),window.dispatchEvent(new Event("locationchange")),e}}(history.replaceState),window.addEventListener("popstate",function(){window.dispatchEvent(new Event("locationchange"))}),window.addEventListener("locationchange",function(){e.reset(),e.loadCondition()})},__listenForActionClickedRequests:function(t){l(t)&&"ACTION_CLICKED"===t.data.action&&(t.data.answer_id===this.__intro._options.steps[0].highlightEventAnswerId&&this.__intro.exit())},__listenForObserveRequests:function(t){if(l(t)&&"OBSERVE"===t.data.action){var e=new o.default(t.data);e.tourJs=this,e.init()}},__listenForHighlightRequests:function(t){l(t)&&"HIGHLIGHT"===t.data.action&&t.data.selector&&this.highlight(t.data)},__getElementForHighlight:function(t){var e=document.querySelectorAll(t);return Array.from(e).find(c)},highlight:function(t){var e=this,n=t.selector,i=t.closeEvent,o={element:n,fixed:!0,closeEvent:i,highlightEventAnswerId:t.highlightEventAnswerId},s=this.__getElementForHighlight(n);null!=s?("chatListenerClick"===i?this.setOptions({options:{exitOnEsc:!1,exitOnOverlayClick:!1,disableInteraction:!0}}):this.setOptions({options:{exitOnEsc:!0,exitOnOverlayClick:!1,disableInteraction:!1}}),this.__intro.addStep(o),s.addEventListener(i,function(){e.__intro.exit()},{once:!0}),this.__intro._introItems.length&&this.__intro.goToStepNumber(0),this.__intro.exit(),setTimeout(function(){e.__intro.start(o)},50)):(0,r.showError)("Element doesn't exist on DOM")},sendMessage:function(t){this.__intro.exit();var e=document.querySelector(this.selector);e?e.contentWindow.postMessage(Object.assign(t,{source:"get-tour-library"})):(0,r.showError)("Widget's iframe not found!")},reset:function(){this.__intro._options.steps=[],this.__intro.refresh(),this.destroyWidget()},destroyWidget:function(){this.block&&this.block.remove()},renderWidget:function(t){this.block=document.createElement("div"),this.block.className="getchat-widget getchat-widget--expanded";var e='<button type="button" class="getchat-widget__btn getchat-widget__btn--icon" ><i aria-hidden="true" class="getchat-widget__icon--close"></i></button>'+'<iframe src="'.concat(t,'" class="getchat-widget__frame"></iframe>');this.block.innerHTML=e,document.body.appendChild(this.block)},loadStyles:function(){(0,r.loadCss)(this.stylesFilePath),this.stylesLoaded=!0},initEventListeners:function(){var t=this;document.querySelector(".getchat-widget__btn--icon").addEventListener("click",function(){t.block.classList.contains(t.expandClass)?t.hideBlock():t.expandBlock()})},hideBlock:function(){var t=document.querySelector(".getchat-widget__btn--icon").children[0];this.block.classList.remove(this.expandClass),t.className="getchat-widget__icon--expand"},expandBlock:function(){var t=document.querySelector(".getchat-widget__btn--icon").children[0];this.block.classList.add(this.expandClass),t.className="getchat-widget__icon--close"},loadWidgetData:function(){var t="http://localhost:3000/api/the-bot/widget/".concat(this.hash,"/data");return new Promise(function(e,n){return fetch(t,{method:"GET",credentials:"omit",headers:{"Content-Type":"application/json"},mode:"cors",cache:"no-cache",dataType:"jsonp"}).then(function(t){return 200===t.status?t.json():((0,r.showError)("[Ошибка] ".concat(t.statusText)),{})}).then(function(t){return e(t)}).catch(function(t){(0,r.showError)(t),n(t)})})}};e.default=h,t.exports=e.default},function(t,e,n){var i,o,r,s;function a(t){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}s=function(){function t(t){this._targetElement=t,this._introItems=[],this._options={highlightClass:"",exitOnEsc:!0,exitOnOverlayClick:!0,keyboardNavigation:!1,scrollToElement:!0,scrollTo:"element",scrollPadding:30,overlayOpacity:.9,positionPrecedence:["bottom","top","right","left"],disableInteraction:!1,helperElementPadding:0,buttonClass:"introjs-button"}}function e(t,e){var s=[],c=function t(e){if(null===e||"object"!==a(e)||void 0!==e.nodeType)return e;var n={};for(var i in e)void 0!==window.jQuery&&e[i]instanceof window.jQuery?n[i]=e[i]:n[i]=t(e[i]);return n}(e);if(c.step=s.length+1,"string"==typeof c.element&&(c.element=document.querySelector(c.element)),void 0===c.element||null===c.element){var l=document.querySelector(".introjsFloatingElement");null===l&&((l=document.createElement("div")).className="introjsFloatingElement",document.body.appendChild(l)),c.element=l,c.position="floating"}return c.scrollTo=c.scrollTo||this._options.scrollTo,void 0===c.disableInteraction&&(c.disableInteraction=this._options.disableInteraction),null!==c.element&&(s=[c]),this._introItems=s,function(t){var e=document.createElement("div"),n="",i=this;if(e.className="introjs-overlay",t.tagName&&"body"!==t.tagName.toLowerCase()){var o=y(t);o&&(n+="width: "+o.width+"px; height:"+o.height+"px; top:"+o.top+"px;left: "+o.left+"px;",e.style.cssText=n)}else n+="top: 0;bottom: 0; left: 0;right: 0;position: fixed;",e.style.cssText=n;return t.appendChild(e),e.onclick=function(){!0===i._options.exitOnOverlayClick&&r.call(i,t)},window.setTimeout(function(){n+="opacity: "+i._options.overlayOpacity.toString()+";",e.style.cssText=n},10),!0}.call(this,t)&&(o.call(this),this._options.keyboardNavigation&&f.on(window,"keydown",i,this,!0),f.on(window,"resize",n,this,!0)),!1}function n(){this.refresh.call(this)}function i(t){var e=null===t.code?t.which:t.code;null===e&&(e=null===t.charCode?t.keyCode:t.charCode),"Escape"!==e&&27!==e||!0!==this._options.exitOnEsc||r.call(this,this._targetElement)}function o(){this._direction="forward",void 0!==this._currentStepNumber&&h(this._introItems,function(t,e){t.step===this._currentStepNumber&&(this._currentStep=e-1,this._currentStepNumber=void 0)}.bind(this)),void 0===this._currentStep?this._currentStep=0:++this._currentStep;var t=this._introItems[0],e=!0;return void 0!==this._introBeforeChangeCallback&&(e=this._introBeforeChangeCallback.call(this,t.element)),!1===e?(--this._currentStep,!1):this._introItems.length<=this._currentStep?("function"==typeof this._introCompleteCallback&&this._introCompleteCallback.call(this),void r.call(this,this._targetElement)):void function(t){void 0!==this._introChangeCallback&&this._introChangeCallback.call(this,t.element);var e,n=this,i=document.querySelector(".introjs-helperLayer"),o=document.querySelector(".introjs-tooltipReferenceLayer"),r="introjs-helperLayer";"string"==typeof t.highlightClass&&(r+=" "+t.highlightClass);"string"==typeof this._options.highlightClass&&(r+=" "+this._options.highlightClass);if(null!==i){(e=b(t.element))!==document.body&&_(e,t.element),s.call(n,i),s.call(n,o);var a=document.querySelectorAll(".introjs-fixParent");h(a,function(t){m(t,/introjs-fixParent/g)}),l(),n._lastShowElementTimer&&window.clearTimeout(n._lastShowElementTimer),n._lastShowElementTimer=window.setTimeout(function(){c.call(n,t.scrollTo,t)},350)}else{var u=document.createElement("div"),d=document.createElement("div");u.className=r,d.className="introjs-tooltipReferenceLayer",(e=b(t.element))!==document.body&&_(e,t.element),s.call(n,u),s.call(n,d),this._targetElement.appendChild(u),this._targetElement.appendChild(d),c.call(this,t.scrollTo,t)}var f=n._targetElement.querySelector(".introjs-disableInteraction");f&&f.parentNode.removeChild(f);t.disableInteraction&&function(){var t=document.querySelector(".introjs-disableInteraction");null===t&&((t=document.createElement("div")).className="introjs-disableInteraction",this._targetElement.appendChild(t));s.call(this,t)}.call(n);(function(t){var e;if(t.element instanceof SVGElement)for(e=t.element.parentNode;null!==t.element.parentNode&&e.tagName&&"body"!==e.tagName.toLowerCase();)"svg"===e.tagName.toLowerCase()&&p(e,"introjs-showElement introjs-relativePosition"),e=e.parentNode;p(t.element,"introjs-showElement");var n=v(t.element,"position");for("absolute"!==n&&"relative"!==n&&"fixed"!==n&&p(t.element,"introjs-relativePosition"),e=t.element.parentNode;null!==e&&e.tagName&&"body"!==e.tagName.toLowerCase();){var i=v(e,"z-index"),o=parseFloat(v(e,"opacity")),r=v(e,"transform")||v(e,"-webkit-transform")||v(e,"-moz-transform")||v(e,"-ms-transform")||v(e,"-o-transform");(/[0-9]+/.test(i)||o<1||"none"!==r&&void 0!==r)&&p(e,"introjs-fixParent"),e=e.parentNode}})(t),void 0!==this._introAfterChangeCallback&&this._introAfterChangeCallback.call(this,t.element)}.call(this,t)}function r(t,e){var o=!0;if(void 0!==this._introBeforeExitCallback&&(o=this._introBeforeExitCallback.call(this)),e||!1!==o){var r=t.querySelectorAll(".introjs-overlay");r&&r.length&&h(r,function(t){t.style.opacity=0,window.setTimeout(function(){this.parentNode&&this.parentNode.removeChild(this)}.bind(t),500)}.bind(this));var s=t.querySelector(".introjs-helperLayer");s&&s.parentNode.removeChild(s);var a=t.querySelector(".introjs-tooltipReferenceLayer");a&&a.parentNode.removeChild(a);var c=t.querySelector(".introjs-disableInteraction");c&&c.parentNode.removeChild(c);var u=document.querySelector(".introjsFloatingElement");u&&u.parentNode.removeChild(u),l(),h(document.querySelectorAll(".introjs-fixParent"),function(t){m(t,/introjs-fixParent/g)}),f.off(window,"keydown",i,this,!0),f.off(window,"resize",n,this,!0),void 0!==this._introExitCallback&&this._introExitCallback.call(this),this._currentStep=void 0}}function s(t){var e=this;if(t){if(!this._introItems[this._currentStep])return;var n=this._introItems[this._currentStep],i=y(n.element),o=this._options.helperElementPadding;!function t(e){var n=e.parentNode;if(!n||"HTML"===n.nodeName)return!1;if("fixed"===v(e,"position"))return!0;return t(n)}(n.element)?m(t,"introjs-fixedTooltip"):p(t,"introjs-fixedTooltip"),"floating"===n.position&&(o=0),t.style.cssText="width: "+(i.width+o)+"px; height:"+(i.height+o)+"px; top:"+(i.top-o/2)+"px;left: "+(i.left-o/2)+"px;",window.setTimeout(function(){(function(t){var e=this._introItems[0],n=document.querySelector(".introjs-overlay");if(e.fixed){var i=function(t){return{width:t.offsetWidth,height:t.offsetHeight,left:t.offsetLeft,top:t.offsetTop}}.call(this,t),o=i.width,r=i.height,s=i.left,a=i.top,c=[{x:"0%",y:"0%"},{x:"0%",y:"100%"},{x:s+"px",y:"100%"},{x:s+"px",y:a+"px"},{x:s+o+"px",y:a+"px"},{x:s+o+"px",y:a+r+"px"},{x:s+"px",y:a+r+"px"},{x:s+"px",y:"100%"},{x:"100%",y:"100%"},{x:"100%",y:"0%"}];n&&(n.style.clipPath="polygon(".concat(c.map(function(t){var e=t.x,n=t.y;return e+" "+n}).join(", "),")")),t.style.visibility="hidden"}else n.style.clipPath="",t.style.visibility="visible"}).call(e,t)},35)}}function c(t,e){var n;if("off"!==t&&(this._options.scrollToElement&&(n=e.element.getBoundingClientRect(),!function(t){var e=t.getBoundingClientRect();return e.top>=0&&e.left>=0&&e.bottom+80<=window.innerHeight&&e.right<=window.innerWidth}(e.element)))){var i=g().height;n.bottom-(n.bottom-n.top)<0||e.element.clientHeight>i?window.scrollBy(0,n.top-(i/2-n.height/2)-this._options.scrollPadding):window.scrollBy(0,n.top-(i/2-n.height/2)+this._options.scrollPadding)}}function l(){h(document.querySelectorAll(".introjs-showElement"),function(t){m(t,/introjs-[a-zA-Z]+/g)})}function h(t,e,n){if(t)for(var i=0,o=t.length;i<o;i++)e(t[i],i);"function"==typeof n&&n()}var u,d=(u={},function(t,e){return u[e=e||"introjs-stamp"]=u[e]||0,void 0===t[e]&&(t[e]=u[e]++),t[e]}),f=function(){return new function(){var t="introjs_event";this._id=function(t,e,n,i){return e+d(n)+(i?"_"+d(i):"")},this.on=function(e,n,i,o,r){var s=this._id.apply(this,arguments),a=function(t){return i.call(o||e,t||window.event)};"addEventListener"in e?e.addEventListener(n,a,r):"attachEvent"in e&&e.attachEvent("on"+n,a),e[t]=e[t]||{},e[t][s]=a},this.off=function(e,n,i,o,r){var s=this._id.apply(this,arguments),a=e[t]&&e[t][s];a&&("removeEventListener"in e?e.removeEventListener(n,a,r):"detachEvent"in e&&e.detachEvent("on"+n,a),e[t][s]=null)}}}();function p(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n+" "+e)}else{if(void 0!==t.classList)h(e.split(" "),function(e){t.classList.add(e)});else t.className.match(e)||(t.className+=" "+e)}}function m(t,e){if(t instanceof SVGElement){var n=t.getAttribute("class")||"";t.setAttribute("class",n.replace(e,"").replace(/^\s+|\s+$/g,""))}else t.className=t.className.replace(e,"").replace(/^\s+|\s+$/g,"")}function v(t,e){var n="";return t.currentStyle?n=t.currentStyle[e]:document.defaultView&&document.defaultView.getComputedStyle&&(n=document.defaultView.getComputedStyle(t,null).getPropertyValue(e)),n&&n.toLowerCase?n.toLowerCase():n}function g(){if(void 0!==window.innerWidth)return{width:window.innerWidth,height:window.innerHeight};var t=document.documentElement;return{width:t.clientWidth,height:t.clientHeight}}function y(t){var e=document.body,n=document.documentElement,i=window.pageYOffset||n.scrollTop||e.scrollTop,o=window.pageXOffset||n.scrollLeft||e.scrollLeft,r=t.getBoundingClientRect();return{top:r.top+i,width:r.width,height:r.height,left:r.left+o}}function b(t){var e=window.getComputedStyle(t),n="absolute"===e.position,i=/(auto|scroll)/;if("fixed"===e.position)return document.body;for(var o=t;o=o.parentElement;)if(e=window.getComputedStyle(o),(!n||"static"!==e.position)&&i.test(e.overflow+e.overflowY+e.overflowX))return o;return document.body}function _(t,e){t.scrollTop=e.offsetTop-t.offsetTop}var w=function e(n){var i;if("object"===a(n))i=new t(n);else if("string"==typeof n){var o=document.querySelector(n);if(!o)throw new Error("There is no element with given selector.");i=new t(o)}else i=new t(document.body);return e.instances[d(i,"introjs-instance")]=i,i};return w.version="2.9.3",w.instances={},w.fn=t.prototype={clone:function(){return new t(this)},setOption:function(t,e){return this._options[t]=e,this},setOptions:function(t){return this._options=function(t,e){var n,i={};for(n in t)i[n]=t[n];for(n in e)i[n]=e[n];return i}(this._options,t),this},start:function(t){return e.call(this,this._targetElement,t),this},goToStep:function(t){return function(t){this._currentStep=t-2,void 0!==this._introItems&&o.call(this)}.call(this,t),this},addStep:function(t){return this._options.steps||(this._options.steps=[]),this._options.steps.push(t),this},goToStepNumber:function(t){return function(t){this._currentStepNumber=t,void 0!==this._introItems&&o.call(this)}.call(this,t),this},nextStep:function(){return o.call(this),this},exit:function(t){return r.call(this,this._targetElement,t),this},refresh:function(){return function(){return s.call(this,document.querySelector(".introjs-helperLayer")),s.call(this,document.querySelector(".introjs-tooltipReferenceLayer")),s.call(this,document.querySelector(".introjs-disableInteraction")),this}.call(this),this},onbeforechange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforechange was not a function");return this._introBeforeChangeCallback=t,this},onchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onchange was not a function.");return this._introChangeCallback=t,this},onafterchange:function(t){if("function"!=typeof t)throw new Error("Provided callback for onafterchange was not a function");return this._introAfterChangeCallback=t,this},oncomplete:function(t){if("function"!=typeof t)throw new Error("Provided callback for oncomplete was not a function.");return this._introCompleteCallback=t,this},onexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onexit was not a function.");return this._introExitCallback=t,this},onbeforeexit:function(t){if("function"!=typeof t)throw new Error("Provided callback for onbeforeexit was not a function.");return this._introBeforeExitCallback=t,this}},w},"object"===a(e)&&void 0!==t?(t.exports=s(),t.exports.introJs=function(){return console.warn('Deprecated: please use require("intro.js") directly, instead of the introJs method of the function'),s().apply(this,arguments)}):(o=[],void 0===(r="function"==typeof(i=s)?i.apply(e,o):i)||(t.exports=r))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.__isNativeEvent=r,e.default=void 0;var i=n(0);function o(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function r(t){return["click","mouseover","mouseout","keyup","keypress","change","focus","submit"].indexOf(t)>-1}var s=function(){function t(e){var n=e.listener_id,i=e.selector,o=e.event,r=e.attributeName;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.__tourObject=null,this.listener_id=n,this.selector=i,this.event=o,this.attributeName=r}var e,n,s;return e=t,(n=[{key:"init",value:function(){var t=this;if(null!=this.tourJs){var e=!1,n=this.event,o={attributes:!0,childList:!0,characterData:!1},s=document.querySelector(this.selector);if(r(n))"click"===n?(this.callback=this.nativeClickListener.bind(this),document.addEventListener(n,this.callback,!1)):null!=s?(this.callback=this.nativeEventListener.bind(this),s.addEventListener(n,this.callback,!1)):null==s&&(0,i.showError)("Ошибка: Элемент отсутствует в DOM");else if(s||(s=document.body,o.subtree=!0,e=!0),!1===e){var a,c;switch(n){case"show":c=this.IntersectionShowCallback;break;case"hide":c=this.IntersectionHideCallback;break;case"class_change":c=this.classChangeCallback;break;case"attr_change":c=this.attributeChangeCallback;break;case"text_change":o=Object.assign(o,{subtree:!0,characterData:!0,attributeOldValue:!0,characterDataOldValue:!0}),c=this.characterDataChangeCallback;break;case"children_change":o.subtree=!0,c=this.childrenChangeCallback;break;default:return void(0,i.showError)("Не попал под условия: ".concat(this.selector," - ").concat(n))}if("function"!=typeof c)return void(0,i.showError)("Callback функция не определена!");a=["show","hide"].indexOf(n)>-1?new IntersectionObserver(function(t,e){t.forEach(c.bind(e))}):new MutationObserver(function(t,e){t.forEach(c.bind(e))}),this.tourJs.__observers[this.listener_id]=a,a.observe(s,o)}else{var l=new MutationObserver(function(e,o){switch(n){case"show":e.forEach(t.showCallback.bind(o));break;case"hide":e.forEach(t.hideCallback.bind(o));break;default:(0,i.showError)("Не попал под условия: ".concat(t.selector," - ").concat(t.event)),t.disconnectListener()}});this.tourJs.__observers[this.listener_id]=l,l.observe(s,o)}}else(0,i.showError)("Сперва задайте значение tourJs")}},{key:"disconnectListener",value:function(){var t=this.tourJs.__observers[this.listener_id];t?t.disconnect():(0,i.showError)("Listener с id ".concat(this.listener_id," не найден"))}},{key:"sendMessage",value:function(){this.tourJs.sendMessage({listener_id:this.listener_id})}},{key:"nativeEventListener",value:function(t){t.target.matches(this.selector)&&(this.sendMessage(),t.target.removeEventListener(this.event,this.callback,!1))}},{key:"nativeClickListener",value:function(t){t.target.matches(this.selector)&&(this.sendMessage(),t.target.removeEventListener(this.event,this.callback,!1))}},{key:"IntersectionShowCallback",value:function(t){this.isIntersecting&&(t.sendMessage(),t.disconnectListener())}},{key:"IntersectionHideCallback",value:function(t){0===this.intersectionRatio&&!1===this.isIntersecting&&(t.sendMessage(),t.disconnectListener())}},{key:"showCallback",value:function(t){if("childList"===this.type&&this.addedNodes.length>0){var e=document.querySelector(t.selector);if(this.addedNodes[0].isSameNode(e))return t.sendMessage(),t.disconnectListener()}return!1}},{key:"hideCallback",value:function(t){if("childList"===this.type&&this.removedNodes.length>0){var e=this.removedNodes[0];if(1===e.nodeType&&e.matches(t.selector))return t.sendMessage(),t.disconnectListener()}return!1}},{key:"classChangeCallback",value:function(t){return"attributes"===this.type&&"class"===this.attributeName&&(t.sendMessage(),t.disconnectListener())}},{key:"attributeChangeCallback",value:function(t){return"attributes"===this.type&&this.attributeName===t.attributeName&&(t.sendMessage(),t.disconnectListener())}},{key:"characterDataChangeCallback",value:function(t){"characterData"!==this.type&&"childList"!==this.type||(t.sendMessage(),t.disconnectListener())}},{key:"childrenChangeCallback",value:function(t){"childList"===this.type&&(t.sendMessage(),t.disconnectListener())}},{key:"tourJs",get:function(){return this.__tourObject},set:function(t){this.__tourObject=t}}])&&o(e.prototype,n),s&&o(e,s),t}();e.default=s}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,